<%@page contentType="text/html" pageEncoding="UTF-8"%>
<%
    Modelo.Persona usr = (Modelo.Persona) session.getAttribute("usuario");
    if (usr == null || !"administrador".equalsIgnoreCase(usr.getRol())) {
        response.sendRedirect(request.getContextPath() + "/ControladorLogin?accion=login");
        return;
    }
%>

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>C√°mara Entrada</title>
    <script src="https://unpkg.com/html5-qrcode" type="text/javascript"></script>
    <style>
        #reader { width: 100%; max-width: 400px; margin: auto; }
        #mensajes { margin-top: 20px; font-size: 1.2em; text-align: center; }
    </style>
</head>
<body>
    <h2>üì∑ C√°mara Entrada</h2>
    <div id="reader"></div>
    <div id="mensajes"></div> <!-- Aqu√≠ mostramos mensajes -->

    <script>
    let host = window.location.hostname; 
    let socket = new WebSocket("ws://" + host + ":8080/CRUD-MVC-JAVA/qrSocket");

    socket.onopen = () => {
        console.log("‚úÖ Conectado a WebSocket (Entrada)");
        document.getElementById("mensajes").innerText = "Conectado al servidor ‚úîÔ∏è";
    };

    socket.onerror = (event) => {
        console.error("‚ùå Error en WebSocket", event);
        document.getElementById("mensajes").innerText = "‚ùå Error en conexi√≥n WebSocket";
    };

    socket.onclose = () => {
        console.warn("‚ö†Ô∏è Conexi√≥n WebSocket cerrada");
        document.getElementById("mensajes").innerText = "‚ö†Ô∏è Conexi√≥n cerrada con el servidor";
    };

    socket.onmessage = (event) => {
        let data = JSON.parse(event.data);
        let mensajeDiv = document.getElementById("mensajes");

        if (data.resultado === "valido") {
            alert("‚úÖ Entrada permitida: " + data.usuario);
            mensajeDiv.innerText = "‚úÖ Bienvenido " + data.usuario;

        } else if (data.resultado === "invalido") {
            alert("‚ùå QR inv√°lido en entrada");
            mensajeDiv.innerText = "‚ùå QR inv√°lido o desactivado";
            new Audio("<%= request.getContextPath() %>/audio/mostrar_qr.mp3").play();

        } else if (data.resultado === "duplicado") {
            alert("‚ö†Ô∏è Ya estaba dentro/fuera");
            mensajeDiv.innerText = "‚ö†Ô∏è Acceso duplicado";

        } else if (data.resultado === "error") {
            if (data.detalle === "conexion_bd") {
                alert("üí• Error de conexi√≥n a la base de datos");
                mensajeDiv.innerText = "üí• Error de conexi√≥n a la base de datos";
            } else if (data.detalle === "sql_error") {
                alert("‚ö†Ô∏è Error en la consulta SQL");
                mensajeDiv.innerText = "‚ö†Ô∏è Error en la consulta SQL";
            } else if (data.detalle === "formato_mensaje") {
                alert("‚ö†Ô∏è Formato de QR inv√°lido");
                mensajeDiv.innerText = "‚ö†Ô∏è Formato de QR inv√°lido";
            } else {
                alert("‚ö†Ô∏è Error inesperado en servidor");
                mensajeDiv.innerText = "‚ö†Ô∏è Error inesperado en servidor";
            }

        } else {
            alert("‚ö†Ô∏è Error desconocido en validaci√≥n del QR");
            mensajeDiv.innerText = "‚ö†Ô∏è Error desconocido";
        }
    };

    // --- Control de escaneo ---
    let ultimoQR = "";
    let tiempoUltimo = 0;

    function onScanSuccess(decodedText, decodedResult) {
        let ahora = Date.now();
        if (decodedText === ultimoQR && (ahora - tiempoUltimo) < 2000) {
            console.log("‚ö†Ô∏è QR repetido ignorado en cliente:", decodedText);
            return;
        }
        ultimoQR = decodedText;
        tiempoUltimo = ahora;

        console.log(`QR detectado: ${decodedText}`);
        socket.send("tipo:entrada;" + decodedText);
    }

    let html5QrcodeScanner = new Html5QrcodeScanner("reader", { fps: 10, qrbox: 250 });
    html5QrcodeScanner.render(onScanSuccess);
</script>

    <br>
    <a class="btn btn-secondary" href="<%= request.getContextPath() %>/vistasAdmin/menuCamaras.jsp">
        ‚¨ÖÔ∏è Volver al Men√∫ de C√°maras
    </a>
</body>
</html>
